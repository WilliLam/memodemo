{"version":3,"sources":["applauseSound.mp3","tile.js","Table.js","shuffle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","props","match","e","preventDefault","onClick","val","index","state","showVal","this","className","bind","React","Component","arraysEqual","arr1","arr2","length","i","sleep","ms","Promise","resolve","setTimeout","Board","renderTiles","newTiles","size","rowID","cell","idx","cellID","undefined","boardVals","push","key","id","showValue","matching","matching1","matched","has","clickTile","rows","setState","checkMatch","tile","a","console","log","matches","add","flipping","Set","prevProps","prevState","snapshot","inputSize","Audio","applause","play","style","display","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Controller","inputs","board","generateBoardState","boardState","updateInputs","newInputs","values2","values","ceil","sqrt","Array","j","Object","keys","update","CustomInput","nextProps","nextState","nextContext","strInputs","JSON","stringify","height","placeholder","marginLeft","marginRight","marginTop","marginBottom","parse","$","App","textAlign","width","margin","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,2C,gRCiD5BC,E,kDA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,MAAQ,SAACC,GACLA,EAAEC,iBAGF,EAAKH,MAAMI,QAAQ,EAAKJ,MAAMK,IAAK,EAAKL,MAAMM,QAP9C,EAAKC,MAAQ,CAACC,SAAS,GAFR,E,qDAaf,MAA2B,UAAvBC,KAAKT,MAAMQ,QAEP,yBAAKE,UAAU,gBAAgBN,QAAS,SAASF,GAAIO,KAAKR,MAAMC,IAAIS,KAAKF,OACrE,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,mBACX,kCAEJ,yBAAKA,UAAU,kBACX,4BAAKD,KAAKT,MAAMK,QAS5B,yBAAKK,UAAU,gBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mBACX,4BAAKD,KAAKT,MAAMK,MAEpB,yBAAKK,UAAU,kBACX,4BAAKD,KAAKT,MAAMK,Y,GArCzBO,IAAMC,W,MCIzB,SAASC,EAAYC,EAAMC,GACvB,GAAGD,EAAKE,SAAWD,EAAKC,OACpB,OAAO,EACX,IAAI,IAAIC,EAAIH,EAAKE,OAAQC,KACrB,GAAGH,EAAKG,KAAOF,EAAKE,GAChB,OAAO,EAEf,OAAO,EAGX,SAASC,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,IAkKrCI,E,kDA9JX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IA4BVyB,YAAc,WAKV,IADA,IAAIC,EAAW,GACNR,EAAI,EAAGA,EAAI,EAAKlB,MAAM2B,KAAMT,IAAI,CAGvC,IAFA,IAAIU,EAAK,aAASV,GACdW,EAAO,GACFC,EAAM,EAAGA,EAAM,EAAK9B,MAAM2B,KAAMG,IAAM,CAC3C,IAAIC,EAAM,cAAUb,EAAV,YAAeY,GACzB,QAAqCE,IAAjC,EAAKhC,MAAMiC,UAAUf,GAAGY,GACxBD,EAAKK,KACH,wBAAIC,IAAKJ,EAAQK,GAAIL,SAEpB,CAKP,IAAIM,EAAY,SACe,OAAxB,EAAK9B,MAAM+B,UAAqBxB,EAAY,CAACI,EAAGY,GAAO,EAAKvB,MAAM+B,SAAS,KACtD,OAAzB,EAAK/B,MAAMgC,WAAsBzB,EAAY,CAACI,EAAGY,GAAO,EAAKvB,MAAMgC,UAAU,KAC7E,EAAKhC,MAAMiC,QAAQC,IAAI,EAAKzC,MAAMiC,UAAUf,GAAGY,OAG5CO,EAAY,QAIhBR,EAAKK,KACL,wBAAIC,IAAKJ,EAAQK,GAAIL,GAAQ,kBAAC,EAAD,CAAM1B,IAAK,EAAKL,MAAMiC,UAAUf,GAAGY,GAAMxB,MAAO,CAACY,EAAGY,GAAM1B,QAAS,EAAKsC,UAC3FlC,QAAS6B,OAIzBX,EAASQ,KAAK,wBAAIC,IAAKjB,EAAGkB,GAAIR,GAAQC,IAKpC,EAAKtB,MAAMoC,OAASjB,GACpB,EAAKkB,SAAS,CAACD,KAAKjB,KAtET,EA2EnBmB,WA3EmB,uCA2EN,WAAOC,EAAMxC,GAAb,SAAAyC,EAAA,0DACL,EAAKxC,MAAMiC,QAAQC,IAAIK,GADlB,uBAELE,QAAQC,IAAI,mBAFP,6BAMwB,OAAxB,EAAK1C,MAAM+B,SANX,wBAQL,EAAKM,SAAS,CAACN,SAAS,CAACQ,EAAMxC,KAC3B,WACI,EAAKmB,iBAVR,8BAcEnB,IAAU,EAAKC,MAAM+B,SAAS,GAdhC,wBAeLU,QAAQC,IAAI,gBAfP,8BAmBD,EAAKjD,MAAMkD,QAAQ,EAAK3C,MAAM+B,SAAS,MAAQQ,GAC/C,EAAK9C,MAAMkD,QAAQJ,KAAU,EAAKvC,MAAM+B,SAAS,GApBhD,wBAsBD,EAAKM,SAAS,CAACJ,QAAS,EAAKjC,MAAMiC,QAAQW,IAAIL,GAAMK,IAAI,EAAK5C,MAAM+B,SAAS,IAAKA,SAAS,OAC3F,WACI,EAAKb,iBAxBR,kCA6BD,EAAKmB,SAAS,CAACL,UAAU,CAACO,EAAMxC,KAC5B,WACA,EAAKmB,iBA/BR,UAiCKN,EAAM,KAjCX,eAmCD,EAAKyB,SAAS,CAACN,SAAS,KAAMC,UAAU,OACxC,WACI,EAAKd,iBArCR,kBAuCM,cAvCN,4CA3EM,0DAuHlBiB,UAvHkB,uCAuHN,WAAOI,EAAMxC,GAAb,SAAAyC,EAAA,0DACL,EAAKxC,MAAM6C,SADN,iDAIT,EAAKR,SAAS,CAACQ,UAAW,GAA1B,sBAEH,sBAAAL,EAAA,sEACkB,EAAKF,WAAWC,EAAMxC,GADxC,uBAGkBa,EAAM,KAHxB,OAMW,EAAKyB,SAAS,CAACQ,UAAS,IANnC,4CANY,2CAvHM,wDAEf,EAAK7C,MAAQ,CACToC,KAAO,GACPH,QAAS,IAAIa,IACbf,SAAS,KACTC,UAAU,KACVa,UAAU,GAPC,E,gEAYf3C,KAAKgB,gB,yCAGU6B,EAAWC,EAAWC,GACjC/C,KAAKF,MAAMiC,QAAQb,OAASlB,KAAKT,MAAMyD,WAC9B,IAAIC,MAAMC,KAChBC,OAEHN,EAAUrB,YAAcxB,KAAKT,MAAMiC,YACnCxB,KAAKmC,SAAS,CAACJ,QAAS,IAAIa,IACxBf,SAAS,KACTC,UAAU,OACd9B,KAAKgB,iB,+BAsHL,OACI,yBAAKf,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,2BAAO0B,GAAG,eAAeyB,MAAO,CAACC,QAAQ,SACrC,2BAAOD,MAAO,CAACC,QAAQ,SACtBrD,KAAKF,MAAMoC,c,GArJxB/B,IAAMC,WCDXkD,MAnBf,SAAiBC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAM/C,OAGlB,IAAMkD,GAGXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCXHO,E,kDACJ,WAAYvE,GAAQ,IAAD,sBAEjB,IAAIwE,EAAS,CAAC,SAAU,YAAa,OAAS,OAAQ,MAAS,QAAS,MAAQ,MAC5E,OAAU,OAAQ,MAAQ,MAAO,KAAO,QAAS,aAAa,iBAFlE,gBAGKjE,MAAQ,CAACiE,OAAOA,GACrB,IAAIC,EAAQ,EAAKC,mBAAmB,EAAKnE,MAAMiE,QAC3CG,EAAaF,EAAM,GACnBvB,EAAUuB,EAAM,GAPH,OAQjB,EAAKG,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKJ,MAAQ,CAACoE,WAAWA,EAAYzB,QAAQA,EAASsB,OAAOA,GAT5C,E,yDAYLK,GACZpE,KAAKmC,SAAS,CAAC4B,OAAOK,M,yCAILvB,EAAWC,EAAWC,GACvC,GAAID,EAAUiB,SAAW/D,KAAKF,MAAMiE,OAAQ,CAC1CxB,QAAQC,IAAI,eAEZ,IAAIwB,EAAQhE,KAAKiE,mBAAmBjE,KAAKF,MAAMiE,QAC3CG,EAAaF,EAAM,GACnBvB,EAAUuB,EAAM,GACpBhE,KAAKmE,aAAenE,KAAKmE,aAAajE,KAAKF,MAC3CA,KAAKmC,SAAS,CAAC+B,WAAWA,EAAYzB,QAAQA,O,yCAI/BsB,GAGjB,IAAIM,EAAU,GACd,IAAK,IAAM3C,KAAOqC,EAChBM,EAAQ5C,KAAKC,GACb2C,EAAQ5C,KAAKsC,EAAOrC,IAEtB,IAAI4C,EAAShB,EAAQe,GACrB9B,QAAQC,IAAI,QAAU6B,GACtB9B,QAAQC,IAAI8B,GAIZ,IAHA,IAAIpD,EAAOyC,KAAKY,KAAKZ,KAAKa,KAAKF,EAAO9D,SAElCwD,EAAQ,IAAIS,MAAMvD,GACbT,EAAI,EAAGA,EAAIS,EAAOT,IAAK,CAC9BuD,EAAMvD,GAAK,IAAIgE,MAAMvD,GACrB,IAAK,IAAIwD,EAAI,EAAGA,EAAGxD,EAAMwD,IACM,OAAzBJ,EAAO7D,EAAIS,EAAOwD,KACpBV,EAAMvD,GAAGiE,GAAKJ,EAAO7D,EAAIS,EAAOwD,IAItC,MAAO,CAACV,EAAOD,K,+BAGf,OACI,6BACE,kBAAC,EAAD,CAAOvC,UAAWxB,KAAKF,MAAMoE,WAAYzB,QAASzC,KAAKF,MAAM2C,QAASvB,KAAMlB,KAAKF,MAAMoE,WAAW1D,OAAQwC,UAAiD,EAAtC2B,OAAOC,KAAK5E,KAAKF,MAAMiE,QAAQvD,SACpJ,kBAAC,EAAD,CAAaqE,OAAQ7E,KAAKmE,aAAcJ,OAAQ/D,KAAKF,MAAMiE,c,GA1D5C5D,IAAMC,WAgEzB0E,E,kDACJ,WAAYvF,GAAQ,IAAD,8BACjB,gBACKO,MAAQ,CAACsE,UAAW,CAAC,SAAU,YAAa,OAAS,OAAQ,MAAS,QAAS,MAAQ,MACxF,OAAU,OAAQ,MAAQ,MAAO,KAAO,QAAS,aAAa,eAAgB,EAAI,MAHrE,E,kEAWGW,EAAWC,EAAWC,GAC1C,OAAO,I,+BAGC,IAAD,OAEHC,EAAYC,KAAKC,UAAUpF,KAAKT,MAAMwE,QAE1C,OADAxB,QAAQC,IAAI,UAAW0C,GAEnB,yBAAK9B,MAAO,CAACC,QAAQ,SACnB,4BAAI,4CAEJ,8BAAUD,MAAO,CAACiC,OAAO,QAAS1D,GAAG,WAAW2D,YAAaJ,IAC7D,yBAAK9B,MAAO,CAACmC,WAAW,OAAQC,YAAY,MAAOC,UAAU,SAAUC,aAAa,WAClF,4BACQ/F,QAAS,kBAAM,EAAKJ,MAAMsF,OAAOM,KAAKQ,MAAMC,IAAE,aAAahG,UADnE,gB,GA1BcO,IAAMC,WAsDjByF,MAZf,WACE,OACI,6BACE,yBAAK5F,UAAU,MAAMmD,MAAO,CAAC0C,UAAU,SAAUC,MAAM,MAAOC,OAAO,WACnE,wCACA,6BACA,kBAAC,EAAD,SCzGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5G,MACvB,2DCZN6G,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMC,c","file":"static/js/main.e37bea92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/applauseSound.816eb7f6.mp3\";","import React from \"react\";\n\nclass Tile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showVal: false}\n    }\n\n    match = (e) => {\n        e.preventDefault()\n        // let card = e.currentTarget\n        // console.log(\"yallah\", card)\n        this.props.onClick(this.props.val, this.props.index)\n    }\n\n    render() {\n        if (this.props.showVal === \"false\") {\n            return(\n                <div className=\"flip-card off\" onClick={function(e) {this.match(e)}.bind(this)}>\n                    <div className=\"flip-card-inner\">\n                        <div className=\"flip-card-front\">\n                            <h1>?</h1>\n                        </div>\n                        <div className=\"flip-card-back\">\n                            <h1>{this.props.val}</h1>\n                        </div>\n                    </div>\n                </div>\n\n\n            )\n        } else {\n            return (\n                <div className=\"flip-card on\">\n                    <div className=\"flip-card-inner\">\n                        <div className=\"flip-card-front\">\n                            <h1>{this.props.val}</h1>\n                        </div>\n                        <div className=\"flip-card-back\">\n                            <h1>{this.props.val}</h1>\n                        </div>\n                    </div>\n                </div>\n\n            )\n        }\n    }\n}\n\nexport default Tile;\n","import React from \"react\";\nimport \"jquery\";\nimport applause from \"./applauseSound.mp3\"\nimport Tile from \"./tile\";\nimport \"./tiles.css\"\n\nfunction arraysEqual(arr1, arr2) {\n    if(arr1.length !== arr2.length)\n        return false;\n    for(var i = arr1.length; i--;) {\n        if(arr1[i] !== arr2[i])\n            return false;\n    }\n    return true;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass Board extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows : [],\n            matched: new Set(),\n            matching:null,\n            matching1:null,\n            flipping: false\n        };\n    }\n\n    componentDidMount() {\n        this.renderTiles()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.matched.size === this.props.inputSize) {\n            let sd = new Audio(applause)\n            sd.play()\n        }\n        if (prevProps.boardVals !== this.props.boardVals){\n            this.setState({matched: new Set(),\n                matching:null,\n                matching1:null})\n            this.renderTiles()\n        }\n\n    }\n\n    renderTiles = () => {\n        // console.log(\"renderTiles\", this.state.matching)\n        // console.log(\"render\")\n        // this.setState({rows:[]})\n        let newTiles = []\n        for (var i = 0; i < this.props.size; i++){\n          let rowID = `row${i}`\n          let cell = []\n          for (var idx = 0; idx < this.props.size; idx++){\n              let cellID = `cell${i}-${idx}`\n              if (this.props.boardVals[i][idx] === undefined) {\n                  cell.push(\n                    <td key={cellID} id={cellID}/>\n                )\n              } else {\n                // console.log(\"board matching\", [i, idx], this.state.matching)\n                // if (this.state.matching !== null) {\n                //   console.log(this.state.matching[1])\n                // }\n              let showValue = \"false\";\n                if ((this.state.matching !== null && arraysEqual([i, idx] , this.state.matching[1])) ||\n                (this.state.matching1 !== null && arraysEqual([i, idx] , this.state.matching1[1])) ||\n                (this.state.matched.has(this.props.boardVals[i][idx]))\n                ){\n                // showVal if matched or matching console.log(\"match found\")\n                    showValue = \"true\";\n\n                }\n\n                cell.push(\n                <td key={cellID} id={cellID}><Tile val={this.props.boardVals[i][idx]} index={[i, idx]} onClick={this.clickTile}\n                          showVal={showValue}/></td>)\n            }\n          }\n\n          newTiles.push(<tr key={i} id={rowID}>{cell}</tr>)\n          //   newTiles.push(<tr id={\"cake\"}></tr>)\n        }\n        // console.log(newTiles)\n        // console.log(\"yeehaw\")\n        if (this.state.rows !== newTiles) {\n            this.setState({rows:newTiles})\n        }\n\n    }\n\n    checkMatch = async (tile, index) => {\n        if (this.state.matched.has(tile)) {\n            console.log(\"already matched\")\n            return\n        }\n\n        else if (this.state.matching === null ) {\n            // console.log(\"matching\", tile)\n            this.setState({matching:[tile, index]},\n                ()=> {\n                    this.renderTiles()\n                })\n            // this.updateTiles(tile, index)\n            return\n        } else if (index === this.state.matching[1]) {\n            console.log(\"same clicked\")\n            return\n        }\n        else {\n            if (this.props.matches[this.state.matching[0]] === tile ||\n                this.props.matches[tile] === this.state.matching[0] ) {\n\n                this.setState({matched: this.state.matched.add(tile).add(this.state.matching[0]), matching:null},\n                ()=> {\n                    this.renderTiles()\n                })\n                // this.setState({matching:null})\n                return\n            } else{\n                this.setState({matching1:[tile, index]},\n                    ()=> {\n                    this.renderTiles()\n                })\n                await sleep(1000)\n                // console.log(\"goofed up\")\n                this.setState({matching:null, matching1:null},\n                ()=> {\n                    this.renderTiles()\n                })\n                return \"wrong tile\"\n            }\n        }\n    }\n\n     clickTile = async (tile, index) =>  {\n        if (this.state.flipping) {\n            return\n        }\n        this.setState({flipping : true},\n            // }, 1000)\n     async ()=> {\n                 await this.checkMatch(tile, index)\n\n                 await sleep(600)\n\n                 // setTimeout(()=> {\n                this.setState({flipping:false})\n                // if (res === \"wrong tile\") {\n\n                // }\n            }\n\n        )\n    }\n\n    render()\n        {\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col s12 board\">\n                            <table id=\"simple-board\" style={{display:\"grid\"}}>\n                                <tbody style={{display:\"grid\"}}>\n                                {this.state.rows}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n}\n\nexport default Board;\n//\n","function shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default shuffle;\n","import React from 'react';\nimport './App.css';\nimport Board from './Table'\nimport shuffle from \"./shuffle\";\nimport $ from 'jquery';\nclass Controller extends React.Component {\n  constructor(props) {\n    super();\n    let inputs = {\"Yalla!\": \"Let's go!\", \"Habibi\":\"Dear\", \"Salam\": \"Peace\", \"Walad\":\"Boy\",\n        \"Binnit\": \"Girl\", \"Wahid\":\"One\", \"Asfi\":\"Sorry\", \"Sabah heir\":\"Good morning\"};\n    this.state = {inputs:inputs}\n    let board = this.generateBoardState(this.state.inputs);\n    let boardState = board[0];\n    let matches = board[1];\n    this.updateInputs = this.updateInputs.bind(this)\n    this.state = {boardState:boardState, matches:matches, inputs:inputs}\n\n  }\n  updateInputs (newInputs) {\n    this.setState({inputs:newInputs})\n    return\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.inputs !== this.state.inputs) {\n      console.log(\"SUER UPDATE\")\n      // this.generateBoardState(this.state.inputs)\n      let board = this.generateBoardState(this.state.inputs);\n      let boardState = board[0];\n      let matches = board[1];\n      this.updateInputs = this.updateInputs.bind(this)\n      this.setState({boardState:boardState, matches:matches})\n    }\n  }\n\n  generateBoardState(inputs) {\n    // let Testvalues = [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"R\"];\n\n    let values2 = [];\n    for (const key in inputs) {\n      values2.push(key);\n      values2.push(inputs[key])\n    }\n    let values = shuffle(values2);\n    console.log(\"vals2\" , values2)\n    console.log(values);\n    let size = Math.ceil(Math.sqrt(values.length));\n\n    var board = new Array(size);\n    for (var i = 0; i < size;  i++) {\n      board[i] = new Array(size);\n      for (var j = 0; j< size; j++) {\n        if (values[i * size + j] !== null) {\n          board[i][j] = values[i * size + j];\n        }\n      }\n    }\n    return [board, inputs]\n  }\n  render() {\n    return(\n        <div>\n          <Board boardVals={this.state.boardState} matches={this.state.matches} size={this.state.boardState.length} inputSize={Object.keys(this.state.inputs).length*2}/>\n          <CustomInput update={this.updateInputs} inputs={this.state.inputs}></CustomInput>\n        </div>\n      )\n  }\n}\n\nclass CustomInput extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {newInputs: {\"Yalla!\": \"Let's go!\", \"Habibi\":\"Dear\", \"Salam\": \"Peace\", \"Walad\":\"Boy\",\n        \"Binnit\": \"Girl\", \"Wahid\":\"One\", \"Asfi\":\"Sorry\", \"Sabah heir\":\"Good morning\", \"A\":\"B\"}}\n  }\n\n  // updateNewInputs() {\n    // this.setState({newInputs:$(\"#inputBox\").val() })\n\n  // }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false\n  }\n\n  render() {\n    // console.log(\"test\", )\n    let strInputs = JSON.stringify(this.props.inputs)\n    console.log(\"testing\", strInputs)\n    return(\n        <div style={{display:\"grid\"}}>\n          <h4><u>Custom input</u></h4>\n          {/*value={JSON.stringify(this.state.newInputs)*/}\n          <textarea style={{height:\"6rem\"}} id=\"inputBox\" placeholder={strInputs}/>\n          <div style={{marginLeft:\"auto\", marginRight:\"0px\", marginTop:\"0.5rem\", marginBottom:\"0.5rem\"}}>\n            <button\n                    onClick={() => this.props.update(JSON.parse($(\"#inputBox\").val()))}>\n              Update\n            </button>\n          </div>\n        </div>\n    )\n  }\n\n}\n\n\n\n\n\n\nfunction App() {\n  return (\n      <div>\n        <div className=\"App\" style={{textAlign:\"center\", width:\"50%\", margin:\"0 auto\"}}>\n          <h1>MemoDemo</h1>\n          <br/>\n          <Controller/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}