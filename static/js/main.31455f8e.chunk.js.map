{"version":3,"sources":["applauseSound.mp3","tile.js","Table.js","shuffle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","props","match","e","preventDefault","card","currentTarget","console","log","onClick","val","index","state","showVal","this","className","bind","React","Component","arraysEqual","arr1","arr2","length","i","sleep","ms","Promise","resolve","setTimeout","Board","renderTiles","matching","newTiles","size","rowID","cell","idx","cellID","matching1","push","key","id","boardVals","clickTile","matched","has","rows","setState","checkMatch","tile","a","add","flipping","Set","prevProps","prevState","snapshot","Audio","applause","play","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Controller","boardState","generateBoardState","values","board","Array","j","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,2C,gQC2H5BC,E,kDAxHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAsDVC,MAAQ,SAACC,GACLA,EAAEC,iBACF,IAAIC,EAAOF,EAAEG,cACbC,QAAQC,IAAI,SAAUH,GAWtB,EAAKJ,MAAMQ,QAAQ,EAAKR,MAAMS,IAAK,EAAKT,MAAMU,QAnE9C,EAAKC,MAAQ,CAACC,SAAS,GAFR,E,qDAmFf,MAA2B,UAAvBC,KAAKb,MAAMY,QAEP,yBAAKE,UAAU,gBAAgBN,QAAS,SAASN,GAAIW,KAAKZ,MAAMC,IAAIa,KAAKF,OACrE,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,mBACX,kCAEJ,yBAAKA,UAAU,kBACX,4BAAKD,KAAKb,MAAMS,QAW5B,yBAAKK,UAAU,gBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mBACX,4BAAKD,KAAKb,MAAMS,MAEpB,yBAAKK,UAAU,kBACX,4BAAKD,KAAKb,MAAMS,Y,GA7GzBO,IAAMC,W,MCOzB,SAASC,EAAYC,EAAMC,GACvB,GAAGD,EAAKE,SAAWD,EAAKC,OACpB,OAAO,EACX,IAAI,IAAIC,EAAIH,EAAKE,OAAQC,KACrB,GAAGH,EAAKG,KAAOF,EAAKE,GAChB,OAAO,EAGf,OAAO,EAGX,SAASC,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,IAgLrCI,E,kDA5KX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAuBV6B,YAAc,WACVvB,QAAQC,IAAI,cAAe,EAAKI,MAAMmB,UAItC,IADA,IAAIC,EAAW,GACNT,EAAI,EAAGA,EAAI,EAAKtB,MAAMgC,KAAMV,IAAI,CAGvC,IAFA,IAAIW,EAAK,aAASX,GACdY,EAAO,GACFC,EAAM,EAAGA,EAAM,EAAKnC,MAAMgC,KAAMG,IAAM,CAC7C,IAAIC,EAAM,cAAUd,EAAV,YAAea,GACvB7B,QAAQC,IAAI,iBAAkB,CAACe,EAAGa,GAAM,EAAKxB,MAAMmB,UACvB,OAAxB,EAAKnB,MAAMmB,UACXxB,QAAQC,IAAI,EAAKI,MAAMmB,SAAS,IAEP,OAAxB,EAAKnB,MAAMmB,UAAqBZ,EAAY,CAACI,EAAGa,GAAO,EAAKxB,MAAMmB,SAAS,KACpD,OAAzB,EAAKnB,MAAM0B,WAAsBnB,EAAY,CAACI,EAAGa,GAAO,EAAKxB,MAAM0B,UAAU,KAC9E/B,QAAQC,IAAI,eACZ2B,EAAKI,KACL,wBAAIC,IAAKH,EAAQI,GAAIJ,GAAQ,kBAAC,EAAD,CAAM3B,IAAK,EAAKT,MAAMyC,UAAUnB,GAAGa,GAAMzB,MAAO,CAACY,EAAGa,GAAM3B,QAAS,EAAKkC,UAC3F9B,QAAQ,YACT,EAAKD,MAAMgC,QAAQC,IAAI,EAAK5C,MAAMyC,UAAUnB,GAAGa,IACtDD,EAAKI,KACP,wBAAIC,IAAKH,EAAQI,GAAIJ,GAAQ,kBAAC,EAAD,CAAM3B,IAAK,EAAKT,MAAMyC,UAAUnB,GAAGa,GAAMzB,MAAO,CAACY,EAAGa,GAAM3B,QAAS,EAAKkC,UAC3F9B,QAAU,WAIpBsB,EAAKI,KACL,wBAAIC,IAAKH,EAAQI,GAAIJ,GAAQ,kBAAC,EAAD,CAAM3B,IAAK,EAAKT,MAAMyC,UAAUnB,GAAGa,GAAMzB,MAAO,CAACY,EAAGa,GAAM3B,QAAS,EAAKkC,UAC3F9B,QAAQ,YAKxBmB,EAASO,KAAK,wBAAIC,IAAKjB,EAAGkB,GAAIP,GAAQC,IAKpC,EAAKvB,MAAMkC,OAASd,GACpB,EAAKe,SAAS,CAACD,KAAKd,KAhET,EAqEnBgB,WArEmB,uCAqEN,WAAOC,EAAMtC,GAAb,SAAAuC,EAAA,0DACL,EAAKtC,MAAMgC,QAAQC,IAAII,GADlB,uBAEL1C,QAAQC,IAAI,mBAFP,6BAMwB,OAAxB,EAAKI,MAAMmB,SANX,wBAQL,EAAKgB,SAAS,CAAChB,SAAS,CAACkB,EAAMtC,KAC3B,WACI,EAAKmB,iBAVR,8BAcEnB,IAAU,EAAKC,MAAMmB,SAAS,GAdhC,wBAeLxB,QAAQC,IAAI,gBAfP,8BAmBD,EAAKI,MAAMmB,SAAS,KAAOkB,EAnB1B,wBAqBD,EAAKF,SAAS,CAACH,QAAS,EAAKhC,MAAMgC,QAAQO,IAAIF,GAAOlB,SAAS,OAC/D,WACI,EAAKD,iBAvBR,kCA4BD,EAAKiB,SAAS,CAACT,UAAU,CAACW,EAAMtC,KAC5B,WACA,EAAKmB,iBA9BR,UAgCKN,EAAM,KAhCX,eAkCD,EAAKuB,SAAS,CAAChB,SAAS,KAAMO,UAAU,OACxC,WACI,EAAKR,iBApCR,kBAsCM,cAtCN,4CArEM,0DAgHlBa,UAhHkB,uCAgHN,WAAOM,EAAMtC,GAAb,SAAAuC,EAAA,0DACL,EAAKtC,MAAMwC,SADN,iDAIT,EAAKL,SAAS,CAACK,UAAW,GAA1B,sBAEC,sBAAAF,EAAA,6DACI,EAAKF,WAAWC,EAAMtC,GAD1B,SAEUa,EAAM,KAFhB,OAIO,EAAKuB,SAAS,CAACK,UAAS,IAJ/B,4CAuBD7C,QAAQC,IAAI,SAAUyC,EAAMtC,GA7BnB,2CAhHM,wDAEf,EAAKC,MAAQ,CACTkC,KAAO,GACPF,QAAS,IAAIS,IACbtB,SAAS,KACTO,UAAU,KACVc,UAAU,GAPC,E,gEAYftC,KAAKgB,gB,yCAKUwB,EAAWC,EAAWC,GACL,IAA5B1C,KAAKF,MAAMgC,QAAQX,MACV,IAAIwB,MAAMC,KAChBC,S,+BAwIH,OACI,yBAAK5C,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,2BAAO0B,GAAG,gBACN,+BACC3B,KAAKF,MAAMkC,c,GAnKxB7B,IAAMC,WCLX0C,MAnBf,SAAiBC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMvC,OAGlB,IAAM0C,GAGXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCXHO,E,kDACJ,WAAYnE,GAAQ,IAAD,8BACjB,gBACKW,MAAQ,CAACqB,KAAK,EAAGoC,WAAW,EAAKC,sBAFrB,E,iEAMjB,IAAIC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtDA,EAASX,EAAQW,GAGjB,IADA,IAAIC,EAAQ,IAAIC,MAAM,GACblD,EAAI,EAAGA,EAAI,EAAIA,IAAK,CAC3BiD,EAAMjD,GAAK,IAAIkD,MAAM,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAG,EAAGA,IACpBF,EAAMjD,GAAGmD,GAAKH,EAAS,EAAFhD,EAAImD,GAI7B,OAAOF,I,+BAGP,OACE,kBAAC,EAAD,CAAO9B,UAAW5B,KAAKF,MAAMyD,WAAYpC,KAAM,Q,GAtB5BhB,IAAMC,WAwDhByD,MAvBf,WACE,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,QC7Bc6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7E,MACvB,2DCZN8E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAMC,c","file":"static/js/main.31455f8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/applauseSound.816eb7f6.mp3\";","import React from \"react\";\n\nclass Tile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showVal: false}\n    }\n    //\n    // componentDidMount() {\n    //     let card = document.getElementsByClassName(\"flip-card\");\n    //     for (var i = 0; i < card.length; i++) {\n    //         card[i].addEventListener('click', function(i) {\n    //             this.match()\n    //             if (card[i].classList.contains('on')) {\n    //                 card[i].classList.remove('off');\n    //                 card[i].classList.add('on');\n    //             } else {\n    //                 card[i].classList.remove('on');\n    //                 card[i].classList.add('off');\n    //             }\n    //     }.bind(this));\n    //     }\n    //\n    // }\n\n    // handleClick() {\n    //\n    // }\n\n\n    // componentDidMount() {\n    //     if (this.props.val in this.props.matched ) {\n    //         this.setState({showVal:true})\n    //     }\n    //     if (this.props.matching != null) {\n    //         // console.log(this.props.matching)\n    //         if (this.props.matching[1] === this.props.index) {\n    //             this.setState({showVal:true})\n    //         }\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n    //     // console.log(\"helloThere\")\n    //     if (this.props.showVal in this.props.matched ) {\n    //         this.setState({showVal:true})\n    //     }\n    //     if (this.props.matching === \"true\" && this.state.showVal === false) {\n    //         // console.log(this.props.matching, \"wowzers\")\n    //         console.log(\"tile matching\", this.props.matching , this.props.index, \"wtf\")\n    //         this.setState({showVal:true})\n    //         // }\n    //     }\n    //     if (this.props.matching === \"false\" && this.state.showVal === true) {\n    //         this.setState({showVal:false})\n    //     }\n    // }\n\n    match = (e) => {\n        e.preventDefault()\n        let card = e.currentTarget\n        console.log(\"yallah\", card)\n\n        // if (card.classList.contains('on')) {\n        //     card.classList.remove('on');\n        //     card.classList.add('off');\n        // } else {\n        //     card.classList.remove('off');\n        //     card.classList.add('on');\n        // }\n        // e.preventDefault();\n        // console.log(this.props.val)\n        this.props.onClick(this.props.val, this.props.index)\n        // this.setState({showVal:true})\n    }\n\n    // <div id=\"card\">\n    //                     <div className=\"front\">\n    //                         <button type={\"button\"} onClick={this.match}> {\"?\"} </button>\n    //                     </div>\n    //                     {/*<div className=\"back\">*/}\n    //                     {/*    Back content*/}\n    //                     {/*</div>*/}\n    //                 </div>\n\n    render() {\n        if (this.props.showVal === \"false\") {\n            return(\n                <div className=\"flip-card off\" onClick={function(e) {this.match(e)}.bind(this)}>\n                    <div className=\"flip-card-inner\">\n                        <div className=\"flip-card-front\">\n                            <h1>?</h1>\n                        </div>\n                        <div className=\"flip-card-back\">\n                            <h1>{this.props.val}</h1>\n                            {/*<p>Architect & Engineer</p>*/}\n                            {/*<p>We love that guy</p>*/}\n                        </div>\n                    </div>\n                </div>\n\n\n            )\n        } else {\n            return (\n                <div className=\"flip-card on\">\n                    <div className=\"flip-card-inner\">\n                        <div className=\"flip-card-front\">\n                            <h1>{this.props.val}</h1>\n                        </div>\n                        <div className=\"flip-card-back\">\n                            <h1>{this.props.val}</h1>\n                            {/*<p>Architect & Engineer</p>*/}\n                            {/*<p>We love that guy</p>*/}\n                        </div>\n                    </div>\n                </div>\n\n            )\n        }\n    }\n}\n\nexport default Tile;\n","import React from \"react\";\n// import $ from \"jquery\";\nimport \"jquery\";\nimport applause from \"./applauseSound.mp3\"\n// import \"flip\";\nimport Tile from \"./tile\";\nimport \"./tiles.css\"\n\n\nfunction arraysEqual(arr1, arr2) {\n    if(arr1.length !== arr2.length)\n        return false;\n    for(var i = arr1.length; i--;) {\n        if(arr1[i] !== arr2[i])\n            return false;\n    }\n\n    return true;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass Board extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows : [],\n            matched: new Set(),\n            matching:null,\n            matching1:null,\n            flipping: false\n        };\n    }\n\n    componentDidMount() {\n        this.renderTiles()\n\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.matched.size === 4) {\n            let sd = new Audio(applause)\n            sd.play()\n        }\n    }\n\n    renderTiles = () => {\n        console.log(\"renderTiles\", this.state.matching)\n        // console.log(\"render\")\n        // this.setState({rows:[]})\n        let newTiles = []\n        for (var i = 0; i < this.props.size; i++){\n          let rowID = `row${i}`\n          let cell = []\n          for (var idx = 0; idx < this.props.size; idx++){\n            let cellID = `cell${i}-${idx}`\n              console.log(\"board matching\", [i, idx], this.state.matching)\n              if (this.state.matching !== null) {\n                  console.log(this.state.matching[1])\n              }\n              if ((this.state.matching !== null && arraysEqual([i, idx] , this.state.matching[1])) ||\n                (this.state.matching1 !== null && arraysEqual([i, idx] , this.state.matching1[1]))){\n                console.log(\"match found\")\n                cell.push(\n                <td key={cellID} id={cellID}><Tile val={this.props.boardVals[i][idx]} index={[i, idx]} onClick={this.clickTile}\n                          showVal=\"true\"/></td>)\n              } else if (this.state.matched.has(this.props.boardVals[i][idx])) {\n                  cell.push(\n                <td key={cellID} id={cellID}><Tile val={this.props.boardVals[i][idx]} index={[i, idx]} onClick={this.clickTile}\n                          showVal = \"true\"/></td>)\n              }\n\n              else{\n                cell.push(\n                <td key={cellID} id={cellID}><Tile val={this.props.boardVals[i][idx]} index={[i, idx]} onClick={this.clickTile}\n                          showVal=\"false\"/></td>)\n              }\n\n          }\n\n          newTiles.push(<tr key={i} id={rowID}>{cell}</tr>)\n          //   newTiles.push(<tr id={\"cake\"}></tr>)\n        }\n        // console.log(newTiles)\n        // console.log(\"yeehaw\")\n        if (this.state.rows !== newTiles) {\n            this.setState({rows:newTiles})\n        }\n\n    }\n\n    checkMatch = async (tile, index) => {\n        if (this.state.matched.has(tile)) {\n            console.log(\"already matched\")\n            return\n        }\n\n        else if (this.state.matching === null ) {\n            // console.log(\"matching\", tile)\n            this.setState({matching:[tile, index]},\n                ()=> {\n                    this.renderTiles()\n                })\n            // this.updateTiles(tile, index)\n            return\n        } else if (index === this.state.matching[1]) {\n            console.log(\"same clicked\")\n            return\n        }\n        else {\n            if (this.state.matching[0] === tile) {\n\n                this.setState({matched: this.state.matched.add(tile), matching:null},\n                ()=> {\n                    this.renderTiles()\n                })\n                // this.setState({matching:null})\n                return\n            } else{\n                this.setState({matching1:[tile, index]},\n                    ()=> {\n                    this.renderTiles()\n                })\n                await sleep(1000)\n                // console.log(\"goofed up\")\n                this.setState({matching:null, matching1:null},\n                ()=> {\n                    this.renderTiles()\n                })\n                return \"wrong tile\"\n            }\n        }\n    }\n\n     clickTile = async (tile, index) =>  {\n        if (this.state.flipping) {\n            return\n        }\n        this.setState({flipping : true},\n            // }, 1000)\n         async ()=> {\n             this.checkMatch(tile, index)\n             await sleep(600)\n             // setTimeout(()=> {\n                this.setState({flipping:false})\n                // if (res === \"wrong tile\") {\n\n                // }\n        }\n\n            )\n        // if (this.state.flipping) {\n        //     return\n        // } else{\n        //     sleep(1000)\n        //     this.setState({flipping : true},\n        //         ()=> {\n        //             setTimeout(()=> {\n        //                 this.setState({flipping:false})\n        //             }, 1000)\n        //\n        //         })\n        // }\n        console.log(\"wtffff\", tile, index)\n\n        // if (this.state.matching !== null)\n        // { console.log(\"wtf\" ,index, this.state.matching[1]) }\n        // console.log(\"render tiles\")\n\n    }\n\n    render()\n\n\n        {\n\n\n\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col s12 board\">\n                            <table id=\"simple-board\">\n                                <tbody>\n                                {this.state.rows}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n}\n\nexport default Board;\n//\n","function shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default shuffle;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './Table'\nimport shuffle from \"./shuffle\";\nclass Controller extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {size:2, boardState:this.generateBoardState()}\n\n  }\n  generateBoardState() {\n    let values = [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"R\"]\n    values = shuffle(values)\n    // console.log(values)\n    var board = new Array(3);\n    for (var i = 0; i < 3;  i++) {\n      board[i] = new Array(3);\n      for (var j = 0; j< 3; j++)\n        board[i][j] = values[i*3+j];\n        // board[i][j] = values[i*2+j]\n    }\n    // console.log(values)\n    return board\n  }\n  render() {\n    return(\n      <Board boardVals={this.state.boardState} size={3}/>\n    )\n  }\n}\n\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Controller/>\n      {/*<header className=\"App-header\">*/}\n\n      {/*  <img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n      {/*  <p>*/}\n      {/*    Edit <code>src/App.js</code> and save to reload.*/}\n      {/*  </p>*/}\n      {/*  <a*/}\n      {/*    className=\"App-link\"*/}\n      {/*    href=\"https://reactjs.org\"*/}\n      {/*    target=\"_blank\"*/}\n      {/*    rel=\"noopener noreferrer\"*/}\n      {/*  >*/}\n      {/*    Learn React*/}\n      {/*  </a>*/}\n      {/*</header>*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}